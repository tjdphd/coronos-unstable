; idl batch script - 'jsheet_batch' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;                                                                              ;
; Author: Timothy J. Dennis                                                    ;
;         tdennis@gi.alaska.edu                                                ;
;                                                                              ;
; Developed for use with the family of Heliospheric Physics codes originating  ;
; with the work of C.S. Ng and including 'rmct_np' and 'fourfields.'           ;
;                                                                              ;
; Description: This is a batch script to be read into an instantiation of IDL  ;
;              running on a compute node. The reading in of this script        ;
;              (and the instantiation of IDL on the compute node) is           ;
;              accomplished via the execution of a 'parent' c-shell script     ;
;              called 'jsheet_idl.s'. Prospective users are forewarned not to try ;
;              'feeding' this script to IDL any other way unless they know     ;
;              what they're doing. Otherwise confusion and frustration are     ;
;              certain to ensue. You're much better off reading the            ;
;              documentation in jsheet_idl.s first.                            ;
;                                                                              ;
;              The purpose of this script is to execute the IDL procedure      ;
;              'jsheet' which produces                                         ;
;                                                                              ;
;                                                                              ;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;


; In the calling script, 'jsheet_idl.s', several environment variables are set
; as a means of passing these variables as arguments or 'keyword' parameters
; to 'jsheet'. This batch script accesses these
; environment variables and uses them to define the parameters to be passed.

idl_src_dir  = GETENV('IDL_PATH')          ; Directory where the required IDL
                                           ; sources reside
qty          = GETENV('VSTR_QTY')          ; which field to plot
desc_label   = GETENV('VSTR_DESC_LABEL')   ; descriptive "run label"
type         = GETENV('VSTR_TYPE')         ;
action       = GETENV('VSTR_ACTION')       ;
glb_ext      = GETENV('VSTR_GLB_EXT')      ; resolution string
prefix       = GETENV('VSTR_PREFIX')       ; resolution string
pls_min      = GETENV('VSTR_PLS_MIN')

slice_range  = GETENV('VSTR_SLICE_RANGE')  ;
threshold    = GETENV('VSTR_THRESHOLD')    ;
width        = GETENV('VSTR_WIDTH')        ;
n_cntrs      = GETENV('VSTR_N_CNTRS')      ; number of contours and/or isosurfaces 
inc_cont     = GETENV('VSTR_N_CNTRS')      ; include or don't include contour plane

first_step   = GETENV('VSTR_FIRST_STEP')   ; first time step   in time-series
last_step    = GETENV('VSTR_LAST_STEP')    ; last  time step   in time-series
n_step       = GETENV('VSTR_N_STEP')
n_frames     = GETENV('VSTR_N_FRAMES')
start_angle  = GETENV('VSTR_START_ANGLE')  ; first time step   in time-series
stop_angle   = GETENV('VSTR_STOP_ANGLE')   ; last  time step   in time-series
gap          = GETENV('VSTR_GAP');
window_size  = GETENV('VSTR_WINDOW_SIZE')  ;
yrot         = GETENV('VSTR_YROT')         ; angle of rotation about y axin
first_slice  = GETENV('VSTR_FIRST_SLC')    ; first data-slice  in each time-step
last_slice   = GETENV('VSTR_LAST_SLC')     ; last  data-slice  in each time-step

;IF ( threshold   EQ "" ) THEN PRINT, 'batch: threshold = ', threshold
null_var     = !NULL
IF ( NOT (slice_range EQ "") ) THEN slice_range = UINT(slice_range)
;IF ( NOT (threshold   EQ "") ) THEN threshold   = FLOAT(threshold)
IF ( NOT (width       EQ "") ) THEN width       = FLOAT(width)
IF ( NOT (n_cntrs     EQ "") ) THEN n_cntrs     = UINT(n_cntrs)
IF ( NOT (first_step  EQ "") ) THEN first_step  = UINT(first_step)
IF ( NOT (last_step   EQ "") ) THEN last_step   = UINT(last_step)
IF ( NOT (n_step      EQ "") ) THEN n_step      = UINT(n_step)
IF ( NOT (n_frames    EQ "") ) THEN n_frames    = UINT(n_frames)
IF ( NOT (start_angle EQ "") ) THEN start_angle = FLOAT(start_angle)
IF ( NOT (stop_angle  EQ "") ) THEN stop_angle  = FLOAT(stop_angle)
IF ( NOT (gap         EQ "") ) THEN gap         = UINT(gap)
IF ( NOT (window_size EQ "") ) THEN window_size = UINT(window_size)
IF ( NOT (yrot        EQ "") ) THEN yrot        = FLOAT(yrot)
IF ( NOT (first_slice EQ "") ) THEN first_slice = UINT(first_slice)
IF ( NOT (last_slice  EQ "") ) THEN last_slice  = UINT(last_slice)

PRINT, 'batch: first_step = ', first_step
PRINT, 'batch: last_step  = ', last_step
PRINT, 'batch: threshold  = ', threshold
PRINT, 'batch: threshold  = ', width

; The next step after obtaining arguments is to compile the required sources  ;
; The order of compilation reflects the various dependencies of the sources   ;
; upon one another                                                            ;

.run scan_parameters.pro
.run getResString.pro
.run getInfixString.pro
.run init_jvox.pro
.run fetch_datafile.pro
.run calcKK.pro
.run fetch_layer.pro
.run getSliceRange.pro
.run global_q_minmax_by_slice.pro
.run global_q_minmax.pro
.run calc_flt_Jsqr.pro
.run fill_jvox.pro
.run getCoordConvs.pro
.run getOutputPath.pro
.run makeContourPlot.pro
.run jMask.pro
.run getColorTables.pro
.run makeVolume.pro
.run getTitle.pro
.run makeAxes.pro
.run volstruct.pro
                                                                               ;
; Next we tell idl to add 'idl_src_dir' to its value for IDL_PATH. I don't     ;
; completely understand this - particularly since it comes after               ;
; the compilation, but it's essential                                          ;

PREF_SET, 'IDL_PATH', 'idl_src_dir:<IDL_DEFAULT>', /COMMIT

; Next we set the keyword values - note some cruft here:                       ;
;                                                                              ;

   volstruct, qty,                   $
              desc_label,            $
              type,                  $
              action,                $
              glb_ext,               $
              FIRST_STEP=first_step, $
               LAST_STEP=last_step,  $
               THRESHOLD=threshold,  $
                   WIDTH=width,      $
                    YROT=yrot,       $
                 PLS_MIN=pls_min,    $
                 N_CNTRS=n_cntrs
;             first_slice,  $
;             last_slice,   $
retall

exit
